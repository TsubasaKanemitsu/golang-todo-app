// Code generated by goa v3.12.1, DO NOT EDIT.
//
// service HTTP server
//
// Command:
// $ goa gen github.com/TsubasaKanemitsu/golang-todo-app/backend/design

package server

import (
	"context"
	"net/http"
	"regexp"

	service "github.com/TsubasaKanemitsu/golang-todo-app/gen/service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the service service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	AddTodoTask     http.Handler
	GetTodoTask     http.Handler
	GetTodoTaskList http.Handler
	UpdateTodoTask  http.Handler
	DELETETodoTask  http.Handler
	CORS            http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the service service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *service.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"AddTodoTask", "POST", "/add"},
			{"GetTodoTask", "GET", "/todo/{id}"},
			{"GetTodoTaskList", "GET", "/todolist"},
			{"UpdateTodoTask", "PUT", "/todo/{id}"},
			{"DELETETodoTask", "DELETE", "/todo/{id}"},
			{"CORS", "OPTIONS", "/add"},
			{"CORS", "OPTIONS", "/todo/{id}"},
			{"CORS", "OPTIONS", "/todolist"},
		},
		AddTodoTask:     NewAddTodoTaskHandler(e.AddTodoTask, mux, decoder, encoder, errhandler, formatter),
		GetTodoTask:     NewGetTodoTaskHandler(e.GetTodoTask, mux, decoder, encoder, errhandler, formatter),
		GetTodoTaskList: NewGetTodoTaskListHandler(e.GetTodoTaskList, mux, decoder, encoder, errhandler, formatter),
		UpdateTodoTask:  NewUpdateTodoTaskHandler(e.UpdateTodoTask, mux, decoder, encoder, errhandler, formatter),
		DELETETodoTask:  NewDELETETodoTaskHandler(e.DELETETodoTask, mux, decoder, encoder, errhandler, formatter),
		CORS:            NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "service" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.AddTodoTask = m(s.AddTodoTask)
	s.GetTodoTask = m(s.GetTodoTask)
	s.GetTodoTaskList = m(s.GetTodoTaskList)
	s.UpdateTodoTask = m(s.UpdateTodoTask)
	s.DELETETodoTask = m(s.DELETETodoTask)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return service.MethodNames[:] }

// Mount configures the mux to serve the service endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountAddTodoTaskHandler(mux, h.AddTodoTask)
	MountGetTodoTaskHandler(mux, h.GetTodoTask)
	MountGetTodoTaskListHandler(mux, h.GetTodoTaskList)
	MountUpdateTodoTaskHandler(mux, h.UpdateTodoTask)
	MountDELETETodoTaskHandler(mux, h.DELETETodoTask)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the service endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountAddTodoTaskHandler configures the mux to serve the "service" service
// "addTodoTask" endpoint.
func MountAddTodoTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/add", f)
}

// NewAddTodoTaskHandler creates a HTTP handler which loads the HTTP request
// and calls the "service" service "addTodoTask" endpoint.
func NewAddTodoTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddTodoTaskRequest(mux, decoder)
		encodeResponse = EncodeAddTodoTaskResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "addTodoTask")
		ctx = context.WithValue(ctx, goa.ServiceKey, "service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTodoTaskHandler configures the mux to serve the "service" service
// "GetTodoTask" endpoint.
func MountGetTodoTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/todo/{id}", f)
}

// NewGetTodoTaskHandler creates a HTTP handler which loads the HTTP request
// and calls the "service" service "GetTodoTask" endpoint.
func NewGetTodoTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTodoTaskRequest(mux, decoder)
		encodeResponse = EncodeGetTodoTaskResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetTodoTask")
		ctx = context.WithValue(ctx, goa.ServiceKey, "service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTodoTaskListHandler configures the mux to serve the "service"
// service "GetTodoTaskList" endpoint.
func MountGetTodoTaskListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/todolist", f)
}

// NewGetTodoTaskListHandler creates a HTTP handler which loads the HTTP
// request and calls the "service" service "GetTodoTaskList" endpoint.
func NewGetTodoTaskListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetTodoTaskListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetTodoTaskList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateTodoTaskHandler configures the mux to serve the "service" service
// "UpdateTodoTask" endpoint.
func MountUpdateTodoTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/todo/{id}", f)
}

// NewUpdateTodoTaskHandler creates a HTTP handler which loads the HTTP request
// and calls the "service" service "UpdateTodoTask" endpoint.
func NewUpdateTodoTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateTodoTaskRequest(mux, decoder)
		encodeResponse = EncodeUpdateTodoTaskResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateTodoTask")
		ctx = context.WithValue(ctx, goa.ServiceKey, "service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDELETETodoTaskHandler configures the mux to serve the "service" service
// "DELETETodoTask" endpoint.
func MountDELETETodoTaskHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/todo/{id}", f)
}

// NewDELETETodoTaskHandler creates a HTTP handler which loads the HTTP request
// and calls the "service" service "DELETETodoTask" endpoint.
func NewDELETETodoTaskHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDELETETodoTaskRequest(mux, decoder)
		encodeResponse = EncodeDELETETodoTaskResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DELETETodoTask")
		ctx = context.WithValue(ctx, goa.ServiceKey, "service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service service.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleServiceOrigin(h)
	mux.Handle("OPTIONS", "/add", h.ServeHTTP)
	mux.Handle("OPTIONS", "/todo/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/todolist", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleServiceOrigin applies the CORS response headers corresponding to the
// origin for the service service.
func HandleServiceOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "X-Time, X-Api-Version")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "X-Shared-Secret, X-Authorization, content-type")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
