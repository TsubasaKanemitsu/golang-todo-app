// Code generated by goa v3.12.1, DO NOT EDIT.
//
// service client HTTP transport
//
// Command:
// $ goa gen github.com/TsubasaKanemitsu/golang-todo-app/backend/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the service service endpoint HTTP clients.
type Client struct {
	// AddTodoTask Doer is the HTTP client used to make requests to the addTodoTask
	// endpoint.
	AddTodoTaskDoer goahttp.Doer

	// GetTodoTask Doer is the HTTP client used to make requests to the GetTodoTask
	// endpoint.
	GetTodoTaskDoer goahttp.Doer

	// GetTodoTaskList Doer is the HTTP client used to make requests to the
	// GetTodoTaskList endpoint.
	GetTodoTaskListDoer goahttp.Doer

	// UpdateTodoTask Doer is the HTTP client used to make requests to the
	// UpdateTodoTask endpoint.
	UpdateTodoTaskDoer goahttp.Doer

	// DELETETodoTask Doer is the HTTP client used to make requests to the
	// DELETETodoTask endpoint.
	DELETETodoTaskDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the service service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AddTodoTaskDoer:     doer,
		GetTodoTaskDoer:     doer,
		GetTodoTaskListDoer: doer,
		UpdateTodoTaskDoer:  doer,
		DELETETodoTaskDoer:  doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// AddTodoTask returns an endpoint that makes HTTP requests to the service
// service addTodoTask server.
func (c *Client) AddTodoTask() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddTodoTaskRequest(c.encoder)
		decodeResponse = DecodeAddTodoTaskResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAddTodoTaskRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddTodoTaskDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("service", "addTodoTask", err)
		}
		return decodeResponse(resp)
	}
}

// GetTodoTask returns an endpoint that makes HTTP requests to the service
// service GetTodoTask server.
func (c *Client) GetTodoTask() goa.Endpoint {
	var (
		decodeResponse = DecodeGetTodoTaskResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTodoTaskRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTodoTaskDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("service", "GetTodoTask", err)
		}
		return decodeResponse(resp)
	}
}

// GetTodoTaskList returns an endpoint that makes HTTP requests to the service
// service GetTodoTaskList server.
func (c *Client) GetTodoTaskList() goa.Endpoint {
	var (
		decodeResponse = DecodeGetTodoTaskListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTodoTaskListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTodoTaskListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("service", "GetTodoTaskList", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateTodoTask returns an endpoint that makes HTTP requests to the service
// service UpdateTodoTask server.
func (c *Client) UpdateTodoTask() goa.Endpoint {
	var (
		decodeResponse = DecodeUpdateTodoTaskResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateTodoTaskRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateTodoTaskDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("service", "UpdateTodoTask", err)
		}
		return decodeResponse(resp)
	}
}

// DELETETodoTask returns an endpoint that makes HTTP requests to the service
// service DELETETodoTask server.
func (c *Client) DELETETodoTask() goa.Endpoint {
	var (
		decodeResponse = DecodeDELETETodoTaskResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDELETETodoTaskRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DELETETodoTaskDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("service", "DELETETodoTask", err)
		}
		return decodeResponse(resp)
	}
}
