// Code generated by goa v3.12.1, DO NOT EDIT.
//
// service HTTP client types
//
// Command:
// $ goa gen github.com/TsubasaKanemitsu/golang-todo-app/backend/design

package client

import (
	service "github.com/TsubasaKanemitsu/golang-todo-app/gen/service"
	goa "goa.design/goa/v3/pkg"
)

// AddTodoTaskRequestBody is the type of the "service" service "addTodoTask"
// endpoint HTTP request body.
type AddTodoTaskRequestBody struct {
	// Todoタスクのタイトル
	Title string `form:"title" json:"title" xml:"title"`
	// Todoタスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクを割り当てられた人の名前
	Asignee *string `form:"asignee,omitempty" json:"asignee,omitempty" xml:"asignee,omitempty"`
	// Todoタスクの開始予定日
	StartDate string `form:"startDate" json:"startDate" xml:"startDate"`
	// Todoタスクの終了予定日
	EndDate string `form:"endDate" json:"endDate" xml:"endDate"`
}

// GetTodoTaskResponseBody is the type of the "service" service "GetTodoTask"
// endpoint HTTP response body.
type GetTodoTaskResponseBody struct {
	// TodoタスクのユニークID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Todoタスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Todoタスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクを割り当てられた人の名前
	Asignee *string `form:"asignee,omitempty" json:"asignee,omitempty" xml:"asignee,omitempty"`
	// Todoタスクの開始予定日
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// Todoタスクの終了予定日
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
}

// GetTodoTaskListResponseBody is the type of the "service" service
// "GetTodoTaskList" endpoint HTTP response body.
type GetTodoTaskListResponseBody []*TodoTaskTitleListResponse

// TodoTaskTitleListResponse is used to define fields on response body types.
type TodoTaskTitleListResponse struct {
	// TodoタスクのユニークID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Todoタスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// NewAddTodoTaskRequestBody builds the HTTP request body from the payload of
// the "addTodoTask" endpoint of the "service" service.
func NewAddTodoTaskRequestBody(p *service.AddTodoTaskPayload) *AddTodoTaskRequestBody {
	body := &AddTodoTaskRequestBody{
		Title:       p.Title,
		Description: p.Description,
		Asignee:     p.Asignee,
		StartDate:   p.StartDate,
		EndDate:     p.EndDate,
	}
	return body
}

// NewGetTodoTaskTodoTaskInfoOK builds a "service" service "GetTodoTask"
// endpoint result from a HTTP "OK" response.
func NewGetTodoTaskTodoTaskInfoOK(body *GetTodoTaskResponseBody) *service.TodoTaskInfo {
	v := &service.TodoTaskInfo{
		ID:          *body.ID,
		Title:       *body.Title,
		Description: body.Description,
		Asignee:     body.Asignee,
		StartDate:   body.StartDate,
		EndDate:     body.EndDate,
	}

	return v
}

// NewGetTodoTaskListTodoTaskTitleListOK builds a "service" service
// "GetTodoTaskList" endpoint result from a HTTP "OK" response.
func NewGetTodoTaskListTodoTaskTitleListOK(body []*TodoTaskTitleListResponse) []*service.TodoTaskTitleList {
	v := make([]*service.TodoTaskTitleList, len(body))
	for i, val := range body {
		v[i] = unmarshalTodoTaskTitleListResponseToServiceTodoTaskTitleList(val)
	}

	return v
}

// ValidateGetTodoTaskResponseBody runs the validations defined on
// GetTodoTaskResponseBody
func ValidateGetTodoTaskResponseBody(body *GetTodoTaskResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.StartDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDate))
	}
	if body.EndDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDate))
	}
	return
}

// ValidateTodoTaskTitleListResponse runs the validations defined on
// todoTaskTitleListResponse
func ValidateTodoTaskTitleListResponse(body *TodoTaskTitleListResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	return
}
