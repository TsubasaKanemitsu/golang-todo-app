// Code generated by goa v3.12.1, DO NOT EDIT.
//
// service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/TsubasaKanemitsu/golang-todo-app/backend/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	service "github.com/TsubasaKanemitsu/golang-todo-app/gen/service"
	goa "goa.design/goa/v3/pkg"
)

// BuildAddTodoTaskPayload builds the payload for the service addTodoTask
// endpoint from CLI flags.
func BuildAddTodoTaskPayload(serviceAddTodoTaskBody string) (*service.AddTodoTaskPayload, error) {
	var err error
	var body AddTodoTaskRequestBody
	{
		err = json.Unmarshal([]byte(serviceAddTodoTaskBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"asignee\": \"Voluptatem qui assumenda ipsum.\",\n      \"contents\": \"Laudantium fugiat iusto eaque placeat officia assumenda.\",\n      \"end_date\": \"1970-11-01\",\n      \"label\": \"Ut quia error rerum.\",\n      \"start_date\": \"2004-04-03\",\n      \"title\": \"Quo temporibus dolores voluptas doloremque et aut.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_date", body.StartDate, goa.FormatDate))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_date", body.EndDate, goa.FormatDate))
		if err != nil {
			return nil, err
		}
	}
	v := &service.AddTodoTaskPayload{
		Title:     body.Title,
		Contents:  body.Contents,
		Label:     body.Label,
		Asignee:   body.Asignee,
		StartDate: body.StartDate,
		EndDate:   body.EndDate,
	}

	return v, nil
}

// BuildGetTodoTaskPayload builds the payload for the service GetTodoTask
// endpoint from CLI flags.
func BuildGetTodoTaskPayload(serviceGetTodoTaskID string) (*service.GetTodoTaskPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(serviceGetTodoTaskID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &service.GetTodoTaskPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateTodoTaskPayload builds the payload for the service UpdateTodoTask
// endpoint from CLI flags.
func BuildUpdateTodoTaskPayload(serviceUpdateTodoTaskID string) (*service.UpdateTodoTaskPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(serviceUpdateTodoTaskID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &service.UpdateTodoTaskPayload{}
	v.ID = id

	return v, nil
}

// BuildDELETETodoTaskPayload builds the payload for the service DELETETodoTask
// endpoint from CLI flags.
func BuildDELETETodoTaskPayload(serviceDELETETodoTaskID string) (*service.DELETETodoTaskPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(serviceDELETETodoTaskID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &service.DELETETodoTaskPayload{}
	v.ID = id

	return v, nil
}
