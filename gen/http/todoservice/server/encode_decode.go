// Code generated by goa v3.12.1, DO NOT EDIT.
//
// todoservice HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/TsubasaKanemitsu/golang-todo-app/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	todoservice "github.com/TsubasaKanemitsu/golang-todo-app/gen/todoservice"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAddTodoTaskResponse returns an encoder for responses returned by the
// todoservice addTodoTask endpoint.
func EncodeAddTodoTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(bool)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddTodoTaskRequest returns a decoder for requests sent to the
// todoservice addTodoTask endpoint.
func DecodeAddTodoTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body AddTodoTaskRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddTodoTaskRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAddTodoTaskPayload(&body)

		return payload, nil
	}
}

// EncodeGetTodoTaskResponse returns an encoder for responses returned by the
// todoservice GetTodoTask endpoint.
func EncodeGetTodoTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*todoservice.TodoTaskInfo)
		enc := encoder(ctx, w)
		body := NewGetTodoTaskResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetTodoTaskRequest returns a decoder for requests sent to the
// todoservice GetTodoTask endpoint.
func DecodeGetTodoTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetTodoTaskPayload(id)

		return payload, nil
	}
}

// EncodeGetTodoTaskListResponse returns an encoder for responses returned by
// the todoservice GetTodoTaskList endpoint.
func EncodeGetTodoTaskListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*todoservice.TodoTaskTitle)
		enc := encoder(ctx, w)
		body := NewGetTodoTaskListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeUpdateTodoTaskResponse returns an encoder for responses returned by
// the todoservice UpdateTodoTask endpoint.
func EncodeUpdateTodoTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(bool)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateTodoTaskRequest returns a decoder for requests sent to the
// todoservice UpdateTodoTask endpoint.
func DecodeUpdateTodoTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateTodoTaskRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateTodoTaskRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateTodoTaskPayload(&body, id)

		return payload, nil
	}
}

// EncodeDeleteTodoTaskResponse returns an encoder for responses returned by
// the todoservice DeleteTodoTask endpoint.
func EncodeDeleteTodoTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(bool)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteTodoTaskRequest returns a decoder for requests sent to the
// todoservice DeleteTodoTask endpoint.
func DecodeDeleteTodoTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteTodoTaskPayload(id)

		return payload, nil
	}
}

// marshalTodoserviceTodoTaskTitleToTodoTaskTitleResponse builds a value of
// type *TodoTaskTitleResponse from a value of type *todoservice.TodoTaskTitle.
func marshalTodoserviceTodoTaskTitleToTodoTaskTitleResponse(v *todoservice.TodoTaskTitle) *TodoTaskTitleResponse {
	res := &TodoTaskTitleResponse{
		ID:     v.ID,
		Title:  v.Title,
		Status: v.Status,
		Label:  v.Label,
	}

	return res
}
