// Code generated by goa v3.12.1, DO NOT EDIT.
//
// todo HTTP client CLI support package
//
// Command:
// $ goa gen github.com/TsubasaKanemitsu/golang-todo-app/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	todoservicec "github.com/TsubasaKanemitsu/golang-todo-app/gen/http/todoservice/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `todoservice (add-todo-task|get-todo-task|get-todo-task-list|update-todo-task|delete-todo-task)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` todoservice add-todo-task --body '{
      "asignee": "Voluptatem qui assumenda ipsum.",
      "contents": "Laudantium fugiat iusto eaque placeat officia assumenda.",
      "end_date": "1970-11-01",
      "label": "Ut quia error rerum.",
      "start_date": "2004-04-03",
      "title": "Quo temporibus dolores voluptas doloremque et aut."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		todoserviceFlags = flag.NewFlagSet("todoservice", flag.ContinueOnError)

		todoserviceAddTodoTaskFlags    = flag.NewFlagSet("add-todo-task", flag.ExitOnError)
		todoserviceAddTodoTaskBodyFlag = todoserviceAddTodoTaskFlags.String("body", "REQUIRED", "")

		todoserviceGetTodoTaskFlags  = flag.NewFlagSet("get-todo-task", flag.ExitOnError)
		todoserviceGetTodoTaskIDFlag = todoserviceGetTodoTaskFlags.String("id", "REQUIRED", "Todo task id")

		todoserviceGetTodoTaskListFlags = flag.NewFlagSet("get-todo-task-list", flag.ExitOnError)

		todoserviceUpdateTodoTaskFlags  = flag.NewFlagSet("update-todo-task", flag.ExitOnError)
		todoserviceUpdateTodoTaskIDFlag = todoserviceUpdateTodoTaskFlags.String("id", "REQUIRED", "Todo task id")

		todoserviceDeleteTodoTaskFlags  = flag.NewFlagSet("delete-todo-task", flag.ExitOnError)
		todoserviceDeleteTodoTaskIDFlag = todoserviceDeleteTodoTaskFlags.String("id", "REQUIRED", "Todo task id")
	)
	todoserviceFlags.Usage = todoserviceUsage
	todoserviceAddTodoTaskFlags.Usage = todoserviceAddTodoTaskUsage
	todoserviceGetTodoTaskFlags.Usage = todoserviceGetTodoTaskUsage
	todoserviceGetTodoTaskListFlags.Usage = todoserviceGetTodoTaskListUsage
	todoserviceUpdateTodoTaskFlags.Usage = todoserviceUpdateTodoTaskUsage
	todoserviceDeleteTodoTaskFlags.Usage = todoserviceDeleteTodoTaskUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "todoservice":
			svcf = todoserviceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "todoservice":
			switch epn {
			case "add-todo-task":
				epf = todoserviceAddTodoTaskFlags

			case "get-todo-task":
				epf = todoserviceGetTodoTaskFlags

			case "get-todo-task-list":
				epf = todoserviceGetTodoTaskListFlags

			case "update-todo-task":
				epf = todoserviceUpdateTodoTaskFlags

			case "delete-todo-task":
				epf = todoserviceDeleteTodoTaskFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "todoservice":
			c := todoservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add-todo-task":
				endpoint = c.AddTodoTask()
				data, err = todoservicec.BuildAddTodoTaskPayload(*todoserviceAddTodoTaskBodyFlag)
			case "get-todo-task":
				endpoint = c.GetTodoTask()
				data, err = todoservicec.BuildGetTodoTaskPayload(*todoserviceGetTodoTaskIDFlag)
			case "get-todo-task-list":
				endpoint = c.GetTodoTaskList()
				data = nil
			case "update-todo-task":
				endpoint = c.UpdateTodoTask()
				data, err = todoservicec.BuildUpdateTodoTaskPayload(*todoserviceUpdateTodoTaskIDFlag)
			case "delete-todo-task":
				endpoint = c.DeleteTodoTask()
				data, err = todoservicec.BuildDeleteTodoTaskPayload(*todoserviceDeleteTodoTaskIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// todoserviceUsage displays the usage of the todoservice command and its
// subcommands.
func todoserviceUsage() {
	fmt.Fprintf(os.Stderr, `Todoタスク管理サービス
Usage:
    %[1]s [globalflags] todoservice COMMAND [flags]

COMMAND:
    add-todo-task: Todoタスクを追加する。
    get-todo-task: 指定したTodoタスクの詳細を取得する。
    get-todo-task-list: Todoタスク一覧を取得する。
    update-todo-task: 指定したTodoタスクを更新する。
    delete-todo-task: 指定したTodoタスクを削除する。

Additional help:
    %[1]s todoservice COMMAND --help
`, os.Args[0])
}
func todoserviceAddTodoTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] todoservice add-todo-task -body JSON

Todoタスクを追加する。
    -body JSON: 

Example:
    %[1]s todoservice add-todo-task --body '{
      "asignee": "Voluptatem qui assumenda ipsum.",
      "contents": "Laudantium fugiat iusto eaque placeat officia assumenda.",
      "end_date": "1970-11-01",
      "label": "Ut quia error rerum.",
      "start_date": "2004-04-03",
      "title": "Quo temporibus dolores voluptas doloremque et aut."
   }'
`, os.Args[0])
}

func todoserviceGetTodoTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] todoservice get-todo-task -id INT

指定したTodoタスクの詳細を取得する。
    -id INT: Todo task id

Example:
    %[1]s todoservice get-todo-task --id 7690700790349522607
`, os.Args[0])
}

func todoserviceGetTodoTaskListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] todoservice get-todo-task-list

Todoタスク一覧を取得する。

Example:
    %[1]s todoservice get-todo-task-list
`, os.Args[0])
}

func todoserviceUpdateTodoTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] todoservice update-todo-task -id INT

指定したTodoタスクを更新する。
    -id INT: Todo task id

Example:
    %[1]s todoservice update-todo-task --id 6122907014954972101
`, os.Args[0])
}

func todoserviceDeleteTodoTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] todoservice delete-todo-task -id INT

指定したTodoタスクを削除する。
    -id INT: Todo task id

Example:
    %[1]s todoservice delete-todo-task --id 7521447378485825693
`, os.Args[0])
}
